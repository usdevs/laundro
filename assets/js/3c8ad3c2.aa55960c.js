"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[911],{9213:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return s},default:function(){return k}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),r=["components"],d={id:"breakdown-software",title:"Software"},o=void 0,p={unversionedId:"Legacy/breakdown-software",id:"Legacy/breakdown-software",isDocsHomePage:!1,title:"Software",description:"Assets",source:"@site/docs/02-Legacy/software.md",sourceDirName:"02-Legacy",slug:"/Legacy/breakdown-software",permalink:"/laundro/Legacy/breakdown-software",editUrl:"https://github.com/usdevs/laundro/tree/docs/docs/02-Legacy/software.md",tags:[],version:"current",frontMatter:{id:"breakdown-software",title:"Software"},sidebar:"tutorialSidebar",previous:{title:"Hardware",permalink:"/laundro/Legacy/breakdown-hardware"}},s=[{value:"Assets",id:"assets",children:[],level:2},{value:"Legacy Setup",id:"legacy-setup",children:[{value:"Install dependencies:",id:"install-dependencies",children:[],level:3},{value:"Setup device specific configuration in <code>config.py</code>",id:"setup-device-specific-configuration-in-configpy",children:[],level:3},{value:"Scheduling",id:"scheduling",children:[],level:3}],level:2},{value:"How it Works",id:"how-it-works",children:[{value:"<code>main.py</code>",id:"mainpy",children:[],level:3},{value:"<code>runner.py</code> (<em>TODO</em>)",id:"runnerpy-todo",children:[],level:3},{value:"<code>flagger.py</code> (<em>TODO</em>)",id:"flaggerpy-todo",children:[],level:3},{value:"<code>*.log</code>",id:"log",children:[],level:3},{value:"<code>firestore_manager.py</code> (<em>TODO</em>)",id:"firestore_managerpy-todo",children:[],level:3},{value:"<code>pin.py</code>",id:"pinpy",children:[],level:3},{value:"<code>config.py</code>",id:"configpy",children:[],level:3}],level:2}],m={toc:s};function k(e){var t=e.components,n=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"assets"},"Assets"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Legacy Repo: ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/usdevs/laundry-pi"},"https://github.com/usdevs/laundry-pi")),(0,l.kt)("li",{parentName:"ul"},"Legacy Logs Dump: ",(0,l.kt)("a",{parentName:"li",href:"https://drive.google.com/drive/folders/1K-hUIznR1B5sm4qYlegwSkagch1LGY3G?usp=sharing"},"https://drive.google.com/drive/folders/1K-hUIznR1B5sm4qYlegwSkagch1LGY3G?usp=sharing"))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Logs Dump contains ",(0,l.kt)("inlineCode",{parentName:"p"},".csv")," and ",(0,l.kt)("inlineCode",{parentName:"p"},".log")," that is generated by the previous implementation")),(0,l.kt)("h2",{id:"legacy-setup"},"Legacy Setup"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/usdevs/laundry-pi.git\n")),(0,l.kt)("h3",{id:"install-dependencies"},"Install dependencies:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pip install firebase-admin Adafruit-Blinka Adafruit-ADS1x15\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"References")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/adafruit/Adafruit_CircuitPython_ADS1x15"},"Adafruit-ADS1x15"))),(0,l.kt)("h3",{id:"setup-device-specific-configuration-in-configpy"},"Setup device specific configuration in ",(0,l.kt)("inlineCode",{parentName:"h3"},"config.py")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"config.py")," stores parameters needed for database (firestore) access and device specific configuration."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Generate a firestore cert, and save it somewhere on the RPI")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"This involves creating a firebase service account, and generating a cert for it. (",(0,l.kt)("a",{parentName:"li",href:"https://firebase.google.com/docs/admin/setup"},"reference"),")"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Copy ",(0,l.kt)("inlineCode",{parentName:"strong"},"config.py.example")," as ",(0,l.kt)("inlineCode",{parentName:"strong"},"config.py")," and fill in it in appropriately. ",(0,l.kt)("inlineCode",{parentName:"strong"},"FIRESTORE_CERT")," refers to the path to the firestore cert file we generated above.")))),(0,l.kt)("h3",{id:"scheduling"},"Scheduling"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Start ",(0,l.kt)("inlineCode",{parentName:"p"},"main.py")," when the RPI boots up"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"crontab -e @reboot cd <path-to-laundro-src> && python3 runner.py main.py main`\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Check upstream repo for new updates at a interval of 1 minute"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"crontab -e * * * * * cd path/to/laundro && git pull && git log --pretty=oneline -1 | python3 flagger.py\n")))),(0,l.kt)("h2",{id:"how-it-works"},"How it Works"),(0,l.kt)("h3",{id:"mainpy"},(0,l.kt)("inlineCode",{parentName:"h3"},"main.py")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"This is where the main control loop resides and the entrypoint of the program.")),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Also provides a control loop (",(0,l.kt)("inlineCode",{parentName:"p"},"local_main"),") that updates pin values (to a ",(0,l.kt)("inlineCode",{parentName:"p"},".csv"),") without connection to firebase. This is called when an error is thrown when triggering the actual control loop."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def main():\n    # Initiates a logger\n    init_logger(config.LOGDIR)\n    log = logging.getLogger()\n    log.info('main script started.')\n\n    # Set up Firestore connection\n    firestore = FirestoreManager(config.FIRESTORE_CERT, config.PI_ID)\n\n    # Get the list of pins\n    # Only grabs the pins that are allocated to config.PI_ID (more on this below)\n    pins = get_pins(config.PI_ID)\n    flag = flagger.Flag(flagger.flag)\n\n    # Creates firestore documents for the pins and rpi, if it doesn't exist already\n    firestore.init_pins(map(lambda p: p.id, pins))\n    firestore.init_pi()\n\n    # Grab last recorded pin readings from firestore\n    prev_on = {} # { <pin_id: int> :  is_on: bool }\n    washer_ids = firestore.get_washing_machine_pin_ids()\n    for p in pins:\n        on = p.is_on()\n        prev_on[p.id] = on\n\n        # For each pin, get the previous time when it was updated from firebase\n        current = firestore.get_pin_data(p.id)\n\n        now = sg_time_now()\n        timediff = now - current['timeChanged']\n\n        '''\n        If the the status of the pin is unchanged for a period under 30 min (for washers) / 45 min (for dryers) we not modify the pin record\n\n        Intuition:\n        - To update timeChanged of the pin status upon script start\n        - However since we are not certain of what is the exact timestamp this change happen, timeChangedCertain = False\n\n        Possible Concern:\n        - Can we actually trust the clocks of the RPI?\n        '''\n        if on == current['on'] and p.id in washer_ids and timediff <= dt.timedelta(minutes=30) or \\\n           timediff <= dt.timedelta(minutes=45):\n            continue\n        else:\n            firestore.update_pin(p.id, on, sg_time_now(), timeChangedCertain = False)\n\n    '''\n    Assumes that each run of the loop takes around 25 seconds\n\n    Observation:\n    Runtime of one iteration ~= 2secs * 9pins + 1 secs sleep (around 21-22 secs)\n\n    2secs * 9pins : More on this in `pin.py`\n    '''\n    seconds = 0\n    while True:\n        # Every 6 minutes (24 runs), update the `lastSeen` time for the RPi to the current time.\n        if seconds == 600:\n            firestore.update_pi_last_seen()\n            seconds = 0\n\n        # Check if any pins have changed\n        for p in pins:\n            on = p.is_on()\n            if on != prev_on[p.id]:\n                firestore.update_pin(p.id, on, sg_time_now())\n                prev_on[p.id] = on\n                seconds = 0\n\n        # Check for updates from Github\n        if flag.flagged():\n            flag.unflag()\n            log.info('changes from github were detected. restarting main script.')\n            break\n\n        time.sleep(1) # I don't know why we are sleeping for 1 second, but it is there I guess\n        seconds += 25\n        log.debug(\"{} seconds\".format(seconds))\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"get_pins(pi_id: int): List[Pin]")),": Returns an array of ",(0,l.kt)("inlineCode",{parentName:"p"},"Pin"),"s associated with each RPI"),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"pi_id == 1"),", returns"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Class"),(0,l.kt)("th",{parentName:"tr",align:null},"Pin id"),(0,l.kt)("th",{parentName:"tr",align:null},"ADC ID"),(0,l.kt)("th",{parentName:"tr",align:null},"ADC Pin id"),(0,l.kt)("th",{parentName:"tr",align:null},"record_values"),(0,l.kt)("th",{parentName:"tr",align:null},"threshold"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads1")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P0")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"32000")," (Default)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads1")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P1")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"32000")," (Default)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads1")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P2")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"32000")," (Default)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads1")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P3")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"32000")," (Default)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"5"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads2")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P0")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"20000"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads2")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P1")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"32000")," (Default)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"7"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads2")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P2")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"32000")," (Default)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"8"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads2")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P3")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"32000")," (Default)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"9"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads3")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P0")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"25000"))))),(0,l.kt)("p",null,"If ",(0,l.kt)("inlineCode",{parentName:"p"},"pi_id == 2"),", returns"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Class"),(0,l.kt)("th",{parentName:"tr",align:null},"Pin id"),(0,l.kt)("th",{parentName:"tr",align:null},"ADC ID"),(0,l.kt)("th",{parentName:"tr",align:null},"ADC Pin id"),(0,l.kt)("th",{parentName:"tr",align:null},"record_values"),(0,l.kt)("th",{parentName:"tr",align:null},"threshold"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"10"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads1")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P0")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"15000"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"11"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads1")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P1")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"32000")," (Default)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"12"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads1")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P2")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"32000")," (Default)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"13"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads1")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P3")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"21000"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"14"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads2")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P0")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"32000")," (Default)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"15"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads2")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P1")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"32000")," (Default)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"16"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads2")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P2")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"32000")," (Default)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"17"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads2")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P3")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"32000")," (Default)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Pin"),(0,l.kt)("td",{parentName:"tr",align:null},"18"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ads3")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ADS.P0")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"True")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"32000")," (Default)")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Otherwise, raises an error")),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"As their name implies, ",(0,l.kt)("inlineCode",{parentName:"p"},"ADS.P0"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ADS.P1"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ADS.P2")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"ADS.P3")," corresponds to the pin values 0, 1, 2, and 3 respectively, and are ",(0,l.kt)("inlineCode",{parentName:"p"},"int")," values ",(0,l.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"2"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"3"),"."))),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("inlineCode",{parentName:"p"},"ads1"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ads2")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"ads3")," are ADS ids hardcoded as:"),(0,l.kt)("pre",{parentName:"div"},(0,l.kt)("code",{parentName:"pre"},"ads1 = ADS.ADS1115(i2c, address=0x48)\nads2 = ADS.ADS1115(i2c, address=0x49)\nads3 = ADS.ADS1115(i2c, address=0x4a)\n")))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"runnerpy-todo"},(0,l.kt)("inlineCode",{parentName:"h3"},"runner.py")," (",(0,l.kt)("em",{parentName:"h3"},"TODO"),")"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Importantly, ",(0,l.kt)("inlineCode",{parentName:"p"},"runner.py")," takes a ",(0,l.kt)("inlineCode",{parentName:"p"},"module path")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"function")," and runs ",(0,l.kt)("inlineCode",{parentName:"p"},"function")," in a process. Upon the process terminating, ",(0,l.kt)("inlineCode",{parentName:"p"},"module path")," is reloaded and the new ",(0,l.kt)("inlineCode",{parentName:"p"},"function")," is run in a new process. ",(0,l.kt)("strong",{parentName:"p"},"This is used to run main.py"))),(0,l.kt)("h3",{id:"flaggerpy-todo"},(0,l.kt)("inlineCode",{parentName:"h3"},"flagger.py")," (",(0,l.kt)("em",{parentName:"h3"},"TODO"),")"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Previous repo says that it is a small ecosystem to update the code on the pi every time a new comit is made.")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"log"},(0,l.kt)("inlineCode",{parentName:"h3"},"*.log")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"main.py")," writes logs with the ",(0,l.kt)("inlineCode",{parentName:"p"},"logging")," module to the directory ",(0,l.kt)("inlineCode",{parentName:"p"},"~/laundro_logs/<pi ID>/"),"."),(0,l.kt)("p",null,"A log file can be read with live updates using:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tail -f <name of log file>\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Log File"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"all.log")),(0,l.kt)("td",{parentName:"tr",align:null},"Contains all log messages")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"info.log")),(0,l.kt)("td",{parentName:"tr",align:null},"Contains only INFO level and above messages")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Practically speaking, log messages for individual sensor readings will be in ",(0,l.kt)("inlineCode",{parentName:"strong"},"all.log")," and not ",(0,l.kt)("inlineCode",{parentName:"strong"},"info.log"))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"sample ",(0,l.kt)("inlineCode",{parentName:"p"},"*.log")," files can be find in the logs dump ",(0,l.kt)("a",{parentName:"p",href:"#assets"},"here"))),(0,l.kt)("h3",{id:"firestore_managerpy-todo"},(0,l.kt)("inlineCode",{parentName:"h3"},"firestore_manager.py")," (",(0,l.kt)("em",{parentName:"h3"},"TODO"),")"),(0,l.kt)("h3",{id:"pinpy"},(0,l.kt)("inlineCode",{parentName:"h3"},"pin.py")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Contains the class definition for ",(0,l.kt)("inlineCode",{parentName:"strong"},"Pin"),".")),(0,l.kt)("p",null,"Each ",(0,l.kt)("inlineCode",{parentName:"p"},"Pin")," object represents a input pin of a ADC/ADS, and has the following properties and methods:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Properties"),(0,l.kt)("th",{parentName:"tr",align:null},"Info"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"id (int) ")),(0,l.kt)("td",{parentName:"tr",align:null},"Unique ID to every pin (should be unique across RPis too)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"adc (adafruit_ads1x15.ads1115.ADS.ADS1115)")),(0,l.kt)("td",{parentName:"tr",align:null},"Represents one ADC module. (ADC Module that the pin connects to)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"adc_pin (adafruit_ads1x15.ads1115.ADS.P0/1/2/3)")),(0,l.kt)("td",{parentName:"tr",align:null},"Represents a pin on the ADC module. (ADC pin that pin connects to)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"threshold (int, optional)")),(0,l.kt)("td",{parentName:"tr",align:null},"Light threshold. The pin is on if the light value is below this threshold. ",(0,l.kt)("inlineCode",{parentName:"td"},"Default = 32000"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"record_values (boolean)")),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to record light value readings. Readings are recorded in a csv file named ",(0,l.kt)("inlineCode",{parentName:"td"},"pin-<pin ID>.csv"),".")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"(Instance) Methods"),(0,l.kt)("th",{parentName:"tr",align:null},"Info"),(0,l.kt)("th",{parentName:"tr",align:null},"Returns"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"is_on_single(self)")),(0,l.kt)("td",{parentName:"tr",align:null},"Checks if this pin is currently on, based on 1 reading at the moment. This may return off if the pin is blinking."),(0,l.kt)("td",{parentName:"tr",align:null},"tuple(bool, int)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"is_on(self)")),(0,l.kt)("td",{parentName:"tr",align:null},"True if this pin is on or blinking, False otherwise. The pin will appear off if it is disconnected."),(0,l.kt)("td",{parentName:"tr",align:null},"bool")))),(0,l.kt)("p",null,"To test whether the pin is on (detecting light), an analog pin value is read via"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"light_value = adafruit_ads1x15.analog_in.AnalogIn(adc, adc_pin).value\n")),(0,l.kt)("p",null,"and the light is considered on if ",(0,l.kt)("inlineCode",{parentName:"p"},"light_value < self.threshold"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"is_on(self)"))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Core function that helps determine whether the washer/dryer is on or off")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def is_on(self):\n  \"\"\"\n  Checks whether this pin is on, which includes blinking. Records light values to\n  a csv file, if self.record_values is True.\n  Returns:\n      True if this pin is on or blinking, False otherwise.\n      The pin will appear off if it is disconnected.\n  \"\"\"\n  log = logging.getLogger()\n  values = []\n  final_on = False\n\n  '''\n  Takes 20 readings over 2 seconds (every 0.1 seconds) and returns `True` if at least one detects the pin as on.\n\n  This is part where they account for blinking\n  '''\n  for i in range(20):\n      on, val = self.is_on_single()\n      values.append(val)\n      if not final_on and on:\n          final_on = True\n      time.sleep(0.1)\n\n  log.debug(\"{} is off. Values:{}\".format(self, values))\n\n  # Logs light values into specified .csv file\n  if self.record_values:\n      with open('pin-' + str(self.id) + '.csv','a+') as f:\n          writer = csv.writer(f,quoting=csv.QUOTE_NONNUMERIC)\n          now = dt.datetime.now().isoformat()\n          rows = map(lambda v: (now,v), values)\n          writer.writerows(rows)\n\n  return final_on\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"sample ",(0,l.kt)("inlineCode",{parentName:"p"},"*.csv")," files can be find in the logs dump ",(0,l.kt)("a",{parentName:"p",href:"#assets"},"here"))),(0,l.kt)("h3",{id:"configpy"},(0,l.kt)("inlineCode",{parentName:"h3"},"config.py")),(0,l.kt)("p",null,"Stores some config values:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"FIRESTORE_CERT")),(0,l.kt)("td",{parentName:"tr",align:null},"The path to the JSON file containing the Firestore certificate. Used to create a new ",(0,l.kt)("inlineCode",{parentName:"td"},"FirestoreManager"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"PI_ID")),(0,l.kt)("td",{parentName:"tr",align:null},"Value is either ",(0,l.kt)("inlineCode",{parentName:"td"},"1")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"2"),", is an identifier that determines which pins to update. Is called by ",(0,l.kt)("inlineCode",{parentName:"td"},"get_pins(id)")," in ",(0,l.kt)("inlineCode",{parentName:"td"},"main.py")," for a list of ",(0,l.kt)("inlineCode",{parentName:"td"},"Pin")," objects.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"LOGDIR")),(0,l.kt)("td",{parentName:"tr",align:null},"Directory path to save log files in. Called in ",(0,l.kt)("inlineCode",{parentName:"td"},'utils.init_logger(logdir="", logger_name=None)'))))))}k.isMDXComponent=!0}}]);